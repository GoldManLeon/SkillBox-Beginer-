{\rtf1\ansi\ansicpg1251\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 2.   
\f1\b struct
\f2\b0  BlackjackCard \{\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf2      \
     \
     
\f1\b enum
\f2\b0  Suit: Character \{\
         
\f1\b case
\f2\b0  spades = "\uc0\u9824 ", hearts = "\u9825 ", diamonds = "\u9826 ", clubs = "\u9827 "\
     \}\
     
\f1\b enum
\f2\b0  Rank: Int \{\
         
\f1\b case
\f2\b0  two, three, four, five, six, seven, eight, nine, ten\
         
\f1\b case
\f2\b0  jack, queen, king, ace\
         
\f1\b struct
\f2\b0  Values \{\
             
\f1\b let
\f2\b0  first: Int, second: Int?\
         \}\
         
\f1\b var
\f2\b0  values: Values \{\
             
\f1\b switch
\f2\b0  
\f1\b self
\f2\b0  \{\
             
\f1\b case
\f2\b0  .ace:\
                 
\f1\b return
\f2\b0  Values(first: 1, second: 11)\
             
\f1\b case
\f2\b0  .jack, .queen, .king:\
                 
\f1\b return
\f2\b0  Values(first: 10, second: 
\f1\b nil
\f2\b0 )\
             
\f1\b default
\f2\b0 :\
                 
\f1\b return
\f2\b0  Values(first: 
\f1\b self
\f2\b0 .rawValue, second: 
\f1\b nil
\f2\b0 )\
             \}\
         \}\
     \}\
     \
     \
     
\f1\b let
\f2\b0  rank: Rank, suit: Suit\
     
\f1\b var
\f2\b0  description: String \{\
         
\f1\b var
\f2\b0  output = "suit is \\(suit.rawValue),"\
         output += " value is \\(rank.values.first)"\
         
\f1\b if
\f2\b0  
\f1\b let
\f2\b0  second = rank.values.second \{\
             output += " or \\(second)"\
         \}\
         
\f1\b return
\f2\b0  output\
     \}\
 \}\
 
\f1\b let
\f2\b0  theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)\
 print("theAceOfSpades: \\(theAceOfSpades.description)")\
 \
 
\f1\b let
\f2\b0  heartsSymbol = BlackjackCard.Suit.hearts.rawValue\
print(heartsSymbol)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf2 \
\

\f2\b0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf2 3. Int, String, Character, Float.\
\
4.  
\f1\b struct
\f2\b0  Size \{\
    
\f1\b var
\f2\b0  height: Int = 0\
    
\f1\b var
\f2\b0  widht: Int = 0\
    
\f1\b var
\f2\b0  radius: Int = 0\
\}\
\

\f1\b struct
\f2\b0  Point \{\
    
\f1\b var
\f2\b0  x: Int = 0\
    
\f1\b var
\f2\b0  y: Int = 0\
    
\f1\b var
\f2\b0  h: Int = 0\
    
\f1\b var
\f2\b0  z: Int = 0\
\}\
\

\f1\b class
\f2\b0  RectangleAndCircle\{\
    
\f1\b var
\f2\b0  size = Size()\
    
\f1\b var
\f2\b0  point = Point()\
    
\f1\b init
\f2\b0 (size: Size, point: Point) \{\
        
\f1\b self
\f2\b0 .point = point\
        
\f1\b self
\f2\b0 .size = size\
        print((\uc0\u1093 :(point.x), y:(point.y), h:(point.h), z:(point.z), \u1064 \u1080 \u1088 \u1080 \u1085 \u1072 :(size.widht), \u1042 \u1099 \u1089 \u1086 \u1090 \u1072 :(size.height), \u1056 \u1072 \u1076 \u1080 \u1091 \u1089 :(size.radius)))\
    \}\
\}\
\

\f1\b let
\f2\b0  newRect = RectangleAndCircle(size: Size(height: 500, widht: 300, radius: 200), point: Point(x: 50, y: 90, h: 40, z: 100))\
\
\
5. 1,3,4- \uc0\u1086 \u1096 \u1080 \u1073 \u1082 \u1072 , \u1087 \u1086 \u1090 \u1086 \u1084 \u1091  \u1095 \u1090 \u1086  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1091 \u1077 \u1090 \u1089 \u1103  \u1082 \u1086 \u1085 \u1089 \u1090 \u1072 \u1085 \u1090 \u1072 .  \
   5, 7 - \uc0\u1086 \u1096 \u1080 \u1073 \u1082 \u1072 , \u1087 \u1086 \u1090 \u1086 \u1084 \u1091  \u1095 \u1090 \u1086  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1091 \u1077 \u1090 \u1089 \u1103  \u1082 \u1086 \u1085 \u1089 \u1090 \u1072 \u1085 \u1090 \u1072  \u1074  \u1089 \u1072 \u1084 \u1086 \u1081  \u1089 \u1090 \u1088 \u1091 \u1082 \u1090 \u1091 \u1088 \u1077 .\
\
\
6. 
\f1\b class
\f2\b0  Vehicle \{\
   
\f1\b var
\f2\b0  gear = 0\

\f1\b var
\f2\b0  currentSpeed = 0.0\
\

\f1\b var
\f2\b0  description: String \{\
\

\f1\b return
\f2\b0  "traveling at \\(currentSpeed) miles per hour"\
\
\}\
\
\
\}\

\f1\b let
\f2\b0  car = Vehicle()\
car.currentSpeed = 25.0\
car.gear = 3\
print("Car: \\(car.description) in gear \\(car.gear)")\
\
7.
\f1\b class
\f2\b0  calculator \{\
\

\f1\b var
\f2\b0  x = 0.0 , y = 0.0\
\
    
\f1\b var
\f2\b0  sum : Double\{\
     
\f1\b get
\f2\b0  \{ 
\f1\b return
\f2\b0  x + y\}\
        \
    \}\
    
\f1\b var
\f2\b0  diff: Double\{\
        
\f1\b get
\f2\b0  \{
\f1\b return
\f2\b0  x - y\}\
    \}\
    
\f1\b var
\f2\b0  mult: Double\{\
        
\f1\b get
\f2\b0  \{
\f1\b return
\f2\b0  x * y\}\
    \}\
    
\f1\b var
\f2\b0  div: Double\{\
        
\f1\b get
\f2\b0  \{
\f1\b return
\f2\b0  x / y\}\
    \}\

\f1\b init
\f2\b0  (x : Double, y : Double) \{\
\

\f1\b self
\f2\b0  .x = x\
\

\f1\b self
\f2\b0  .y = y\
\
\}\
\}\

\f1\b var
\f2\b0  Number1 = calculator (x: 9, y: 6)\
print(Number1.mult)\
\
 \
8.  \uc0\u1050 \u1086 \u1075 \u1076 \u1072  \u1085 \u1077 \u1086 \u1073 \u1093 \u1086 \u1076 \u1080 \u1084 \u1086  \u1080 \u1084 \u1077 \u1090 \u1100  \u1089 \u1074 \u1086 \u1081 \u1089 \u1090 \u1074 \u1072  \u1080 \u1083 \u1080  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1080 , \u1082 \u1086 \u1090 \u1086 \u1088 \u1099 \u1077  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1072 \u1090  \u1074 \u1089 \u1077 \u1084 \u1091  \u1082 \u1083 \u1072 \u1089 \u1089 \u1091  \u1074  \u1094 \u1077 \u1083 \u1086 \u1084 .\
\
9. \uc0\u1050 \u1083 \u1072 \u1089 \u1089 \u1099  - \u1076 \u1072 \
   \uc0\u1057 \u1090 \u1088 \u1091 \u1082 \u1090 \u1091 \u1088 \u1099  - \u1085 \u1077 \u1090 \
   Enum\'92\uc0\u1099  - \u1085 \u1077 \u1090 \
\
\
10. 
\f1\b enum
\f2\b0  Command \{\

\f1\b case
\f2\b0  east, north, west, south\
\}\
\

\f1\b func
\f2\b0  oneStep(coordinates: 
\f1\b inout
\f2\b0  (Int, Int), stepType: String) \{\
    
\f1\b func
\f2\b0  east(coords: 
\f1\b inout
\f2\b0  (Int, Int))\{\
        coords = (coords.0+1, coords.1)\
    \}\
    
\f1\b func
\f2\b0  north( coords: 
\f1\b inout
\f2\b0  (Int, Int)) \{\
    \
    coords = (coords.0, coords.1+1)\
\}\
    
\f1\b func
\f2\b0  west( coords: 
\f1\b inout
\f2\b0  (Int, Int)) \{\
    coords = (coords.0-1, coords.1)\
\}\
    
\f1\b func
\f2\b0  south( coords: 
\f1\b inout
\f2\b0  (Int, Int)) \{\
    coords = (coords.0, coords.1-1)\
    \}\
\
   
\f1\b switch
\f2\b0  stepType \{ 
\f1\b case
\f2\b0  "up":\
   east(coords: &coordinates) 
\f1\b case
\f2\b0  "right":\
   north(coords: &coordinates) 
\f1\b case
\f2\b0  "down":\
   west(coords: &coordinates) 
\f1\b case
\f2\b0  "left":\
   south(coords: &coordinates)\
       
\f1\b default
\f2\b0 :\
   
\f1\b break
\f2\b0 ;\
    \}\
    \}\
\
\

\f1\b var
\f2\b0  coordinates = (10, -5)\
oneStep(coordinates: &coordinates, stepType: "east")\
oneStep(coordinates: &coordinates,\
stepType: "right")\
coordinates\
\
\
}